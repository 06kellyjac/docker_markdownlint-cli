---
# This file is templated, please edit it in the templates folder

stages:
  - lint
  - contain
  - scan


.env_entrypoint:
  image:
    name: _ # Placeholder to keep YAML schemea happy
    entrypoint: &env_entrypoint
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"


lint:templates:
  stage: lint
  image: alpine
  variables:
    faq_version: 0.0.6
  before_script:
    - wget "https://github.com/jzelinskie/faq/releases/download/${faq_version}/faq-linux-amd64" -O /bin/faq
    - chmod +x /bin/faq
  script:
    - echo "Checking for differences in templates"
    - ./scripts/build_templates.sh --diff
    - echo "Checking for differences in Dockerfile templates"
    - ./scripts/build_dockerfile_templates.sh --diff

lint:shell:
  stage: lint
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - LIST_OF_SHELL=$(find -path '.git' -prune -o -print | egrep "\.sh$")
    - docker run -v "$PWD:/mnt" koalaman/shellcheck $LIST_OF_SHELL

lint:yaml:
  stage: lint
  image: sdesbure/yamllint
  before_script:
    - yamllint --version
  script:
    - yamllint --strict .

# Common markdown config
.markdown:
  stage: lint
  image:
    name: registry.gitlab.com/06kellyjac/docker_markdownlint-cli
    entrypoint: *env_entrypoint
  before_script:
    - markdownlint --version
  script:
    - markdownlint .

lint:markdown:docker_hub:
  extends: .markdown
  image:
    name: 06kellyjac/markdownlint-cli

lint:markdown:gitlab:
  extends: .markdown

lint:docker:
  stage: lint
  image:
    name: hadolint/hadolint:latest-debian
    entrypoint: *env_entrypoint
  before_script:
    - hadolint --version
  script:
    - LIST_OF_DOCKERFILES=$(find -path '.git' -prune -o -print | egrep ".*Dockerfile")
    - hadolint $LIST_OF_DOCKERFILES


.contain:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh
{{ range (ds "config").images }}
contain:docker:{{ . }}:
  extends: .contain

contain:docker:{{ . }}-slim:
  extends: .contain
{{ end }}

container_scanning:
  stage: scan
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  allow_failure: true
  services:
    - docker:stable-dind
  artifacts:
    paths:
      - gl-container-scanning-report.json
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.1.0
    - apk add -U wget ca-certificates
    - docker pull ${DOCKER_IMAGE}
    - wget -O clair-scanner https://github.com/arminc/clair-scanner/releases/download/v12/clair-scanner_linux_amd64
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - |
      while( ! wget -timeout=10 -q -O /dev/null http://docker:6060/v1/namespaces ); do
        sleep 1
        echo -n "."
        if [ $retries -eq 10 ]; then
          echo " Timeout, aborting."
          exit 1
        fi
      retries=$(($retries+1))
      done
    - >
      ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json
      -l clair.log -w clair-whitelist.yml ${DOCKER_IMAGE} || true
