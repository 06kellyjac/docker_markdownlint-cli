---
stages:
  - lint
  - contain
  - scan


lint:yaml:
  stage: lint
  image: sdesbure/yamllint
  before_script:
    - yamllint --version
  script:
    - LIST_OF_YAML=$(find -path '.git' -prune -o -print | egrep "\.ya?ml$")
    - yamllint --strict --config-file .yamllint.yaml $LIST_OF_YAML

lint:markdown:
  stage: lint
  image:
    name: 06kellyjac/markdownlint-cli
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  before_script:
    - markdownlint --version
  script:
    - LIST_OF_MARKDOWN=$(find -path '.git' -prune -o -print | egrep "\.md$" | tr '\n' ' ')
    - markdownlint $LIST_OF_MARKDOWN

lint:docker:
  stage: lint
  image:
    name: hadolint/hadolint:latest-debian
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  before_script:
    - hadolint --version
  script:
    - LIST_OF_DOCKERFILES=$(find -path '.git' -prune -o -print | egrep ".*Dockerfile")
    - hadolint $LIST_OF_DOCKERFILES


contain:docker:latest:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh

contain:docker:latest-slim:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh

contain:docker:0.13.0:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh

contain:docker:0.13.0-slim:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh

contain:docker:0.12.0:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh

contain:docker:0.12.0-slim:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh

contain:docker:0.11.0:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh

contain:docker:0.11.0-slim:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh

contain:docker:0.10.0:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh

contain:docker:0.10.0-slim:
  stage: contain
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
  script:
    - .scripts/ci_contain.sh


container_scanning:
  stage: scan
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull ${DOCKER_IMAGE}
    - wget -O clair-scanner https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - |
      while( ! wget -timeout=10 -q -O /dev/null http://docker:6060/v1/namespaces ); do
        sleep 1
        echo -n "."
        if [ $retries -eq 10 ]; then
          echo " Timeout, aborting."
          exit 1
        fi
      retries=$(($retries+1))
      done
    - >
      ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json
      -l clair.log -w clair-whitelist.yml ${DOCKER_IMAGE} || true
  artifacts:
    paths: [ gl-container-scanning-report.json ]
